#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
chat_recurrence_cli.py — Q&A flow for cancer recurrence prediction with DeepKEGG-Agent

Flow:
1) Intro: task = cancer recurrence prediction; show supported cancers
2) Ask which cancer to predict
3) Show which omics will be used (with quick header preview if files exist)
4) Choose model:
   - DeepKEGG (paper model)
   - LR / SVM / XGBoost  [LLM-generated baselines]
5) Choose CV folds & report language
6) Write last_run_config.json -> run step3_run.py -> run step5_report.py
"""

import os, sys, json, re, subprocess
from pathlib import Path
import pandas as pd

AGENT = Path("/tmp/DeepKEGG-agent")
REPO  = Path("/tmp/DeepKEGG-master")
OUTROOT = AGENT / "runs"

SUPPORTED = ["LIHC","BLCA","BRCA","PRAD","AML","WT"]
OMICS_ALL = ["mRNA","miRNA","SNV"]

PAPER_MODEL = "DeepKEGG（论文原法）"
LLM_MODELS = {
    "LR (LLM-generated)"      : "经典ML：LR",
    "SVM (LLM-generated)"     : "经典ML：SVM",
    "XGBoost (LLM-generated)" : "经典ML：XGBoost",
}

def say(msg):
    print(msg, flush=True)

def ask(prompt, default=None, validator=None):
    while True:
        ans = input(prompt + (f" [{default}]" if default else "") + "\n> ").strip()
        if not ans and default is not None:
            ans = default
        if validator is None or validator(ans):
            return ans
        say("Sorry, let's try again.")

def preview_cols(path, n=1):
    try:
        if Path(path).exists():
            df = pd.read_csv(path, nrows=n)
            return list(df.columns)
    except Exception:
        pass
    return None

def build_paths(cancer, id_column="index", label_column="response"):
    base = REPO / f"{cancer}_data"
    return {
        "clinical": str(base / "response.csv"),
        "mrna":     str(base / "mRNA_data.csv"),
        "mirna":    str(base / "miRNA_data.csv"),
        "snv":      str(base / "snv_data.csv"),
        "kegg_gmt": str(REPO / "KEGG_pathways" / "20230205_kegg_hsa.gmt"),
        "kegg_map_long": str(REPO / "KEGG_pathways" / "kegg_anano.txt"),
        "id_column": id_column,
        "label_column": label_column,
    }

def confirm_and_save(cfg):
    out = AGENT / "last_run_config.json"
    out.write_text(json.dumps(cfg, ensure_ascii=False, indent=2), encoding="utf-8")
    say(f"\nSaved to: {out}")
    return out

def run_pipeline():
    say("\n>>> Step 1/2: Train & evaluate")
    subprocess.run([sys.executable, str(AGENT/"step3_run.py")], check=True)
    say("\n>>> Step 2/2: Generate report")
    subprocess.run([sys.executable, str(AGENT/"step5_report.py")], check=True)
    say("✅ Done. Open /tmp/DeepKEGG-agent/runs/summary.html")

def main():
    # 1) Intro
    say("Hi! I’m your assistant for **cancer recurrence prediction**.")
    say("Supported cohorts: " + ", ".join(SUPPORTED))
    say("We can integrate multi-omics (mRNA / miRNA / SNV) and run either the original paper model (DeepKEGG)")
    say("or baseline models that were **generated by an LLM** (LR / SVM / XGBoost).")
    say("I’ll guide you step by step—and generate the final report for you. 🚀\n")

    # 2) Which cancer?
    cancer = ask("Which cancer cohort do you want to predict? (LIHC/BLCA/BRCA/PRAD/AML/WT)",
                 default="LIHC", validator=lambda x: x.upper() in SUPPORTED).upper()

    # 3) Omics preview
    say("\nLet me show you the available omics and a quick header preview.")
    paths = build_paths(cancer)
    previews = {
        "clinical": preview_cols(paths["clinical"]),
        "mRNA":     preview_cols(paths["mrna"]),
        "miRNA":    preview_cols(paths["mirna"]),
        "SNV":      preview_cols(paths["snv"]),
    }
    for k,v in previews.items():
        if v:
            say(f"  - {k:8s}: {v[:10]}")
        else:
            say(f"  - {k:8s}: (not found or unreadable)")

    # Ask omics
    say("\nWhich omics should we use? (comma-separated, any of: mRNA, miRNA, SNV)")
    omics_ans = ask("Your selection", default="mRNA,miRNA,SNV")
    picked = []
    for t in re.split(r"[,\s]+", omics_ans.strip()):
        if t:
            t_norm = t.replace("M","m").replace("R","r")  # loose match
            if "mrna" in t_norm:  picked.append("mRNA")
            elif "mirna" in t_norm: picked.append("miRNA")
            elif "snv" in t_norm:  picked.append("SNV")
    omics = sorted(list(set(picked))) or ["mRNA"]
    say(f"✓ Using omics: {', '.join(omics)}")

    # 4) Model choice: paper vs LLM-generated
    say("\nModel options:")
    say("  1) DeepKEGG (paper model)")
    say("  2) LR (LLM-generated)")
    say("  3) SVM (LLM-generated)")
    say("  4) XGBoost (LLM-generated)")
    msel = ask("Pick a model (1/2/3/4 or name)", default="3").strip().lower()
    if msel in ["1","deepkegg","paper","original"]:
        model = PAPER_MODEL
    elif msel in ["2","lr","logistic"]:
        model = LLM_MODELS["LR (LLM-generated)"]
    elif msel in ["3","svm"]:
        model = LLM_MODELS["SVM (LLM-generated)"]
    elif msel in ["4","xgb","xgboost"]:
        model = LLM_MODELS["XGBoost (LLM-generated)"]
    else:
        model = LLM_MODELS["SVM (LLM-generated)"]
    say(f"✓ Model: {model}")

    # 5) CV + report language
    folds = int(ask("Cross-validation folds?", default="5", validator=lambda x: x.isdigit() and int(x)>=2))
    repeats = int(ask("CV repeats?", default="1", validator=lambda x: x.isdigit() and int(x)>=1))
    lang = ask("Report language? (en/zh)", default="en",
               validator=lambda x: x.lower() in ["en","zh"]).lower()

    # 6) Compose run config
    run_cfg = {
        "data_source": "manifest-conversational",
        "nl_request": f"Recurrence prediction for {cancer} with {model} over {folds}x{repeats}, omics={omics}",
        "report_lang": lang,
        "cancer": cancer,
        "omics": omics,
        "model": model,
        "cv_folds": folds,
        "cv_repeats": repeats,
        "k": 64,
        "paths": paths,
        "output_root": str(OUTROOT),
    }

    say("\n===== Summary =====")
    print(json.dumps(run_cfg, ensure_ascii=False, indent=2))

    ok = ask("Proceed with training & reporting? (y/n)", default="y",
             validator=lambda x: x.lower() in ["y","n"]).lower()
    if ok != "y":
        say("Aborted.")
        sys.exit(0)

    confirm_and_save(run_cfg)
    run_pipeline()

if __name__ == "__main__":
    try:
        main()
    except subprocess.CalledProcessError as e:
        say(f"[ERROR] pipeline failed: {e}")
        sys.exit(2)
    except KeyboardInterrupt:
        say("\nInterrupted.")
        sys.exit(130)
